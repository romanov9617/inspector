"""
Django settings for admin project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import configparser
import os
from datetime import timedelta
from pathlib import Path

import boto3
from redis import Redis  # type: ignore

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


SERVER_CONFIG_PATH = os.path.join(BASE_DIR, "./config/server.conf")

if not os.path.exists(SERVER_CONFIG_PATH):
    raise FileNotFoundError("Server configuration file not found")

config = configparser.ConfigParser()
config.read(SERVER_CONFIG_PATH)


REGULAR_API_PREFIX = "api/"

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-*vu#n95#x1l_0-t6@tm8%*#ct2w8(yrvb32(v^t3c)fy4+ag25"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]  # type: ignore


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    'rest_framework_simplejwt.token_blacklist',
    'djoser',
    "drf_spectacular",
    "admin_modules.defects",
    "admin_modules.media",
    "admin_modules.ml_models",
    "admin_modules.reports",
    "admin_modules.oidc",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "admin.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "admin.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": config.get("database", "name"),
        "USER": config.get("database", "user"),
        "PASSWORD": config.get("database", "password"),
        "HOST": config.get("database", "host"),
        "PORT": config.get("database", "port"),
    }
}

AWS_REGION_NAME = config.get("s3", "region_name")
AWS_STORAGE_BUCKET_NAME = config.get("s3", "bucket_name")
AWS_HOST = config.get("s3", "host")
AWS_PORT = config.get("s3", "port")

S3_CLIENT= boto3.client(
    "s3",
    endpoint_url=f"http://{AWS_HOST}:{AWS_PORT}",
    aws_access_key_id=config.get("s3", "access_key_id"),
    aws_secret_access_key=config.get("s3", "secret_access_key"),
    region_name=AWS_REGION_NAME
)

REDIS_HOST = config.get("redis", "host")
REDIS_PORT = config.get("redis", "port")
REDIS_CLIENT = Redis(host=REDIS_HOST, port=REDIS_PORT, db=0)


REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
  'DEFAULT_AUTHENTICATION_CLASSES': (
    'rest_framework_simplejwt.authentication.JWTAuthentication',
  ),
  'DEFAULT_PERMISSION_CLASSES': (
    'rest_framework.permissions.IsAuthenticated',
  ),
}

with open("./.certs/private.key") as file:
    SIGNING_KEY = file.read()

with open("./.certs/public.key") as file:
    VERIFYING_KEY = file.read()

SIMPLE_JWT = {
  'AUTH_HEADER_TYPES': ('Bearer',),
  "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
  "REFRESH_TOKEN_LIFETIME": timedelta(minutes=720),
  "ROTATE_REFRESH_TOKENS":True,
  "BLACKLIST_AFTER_ROTATION": True,
  "ALGORITHM": "RS256",
  "SIGNING_KEY":SIGNING_KEY,
  "VERIFYING_KEY": VERIFYING_KEY,
  "USER_ID_FIELD": "id",
  "USER_ID_CLAIM": "sub"
}

DJOSER = {
  'USER_CREATE_PASSWORD_RETYPE': True,
  'PASSWORD_RESET_CONFIRM_URL': REGULAR_API_PREFIX+'auth/users/reset_password_confirm/{uid}/{token}',
  'SEND_ACTIVATION_EMAIL': False,  # или True, если хотите двойную верификацию
}

# Для разработки можно отправлять письма в консоль
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


SPECTACULAR_SETTINGS = {
    "TITLE": "Inspector API Gateway",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
}

AUTH_USER_MODEL = 'auth.User'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
