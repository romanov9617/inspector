services:

  postgres:
    container_name: postgres
    image: postgres:17-alpine
    env_file: deploy/docker/postgres.env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - postgres

# postgres ui
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file: deploy/docker/pgadmin.env
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: unless-stopped
    environment_file:
      - ./deploy/docker/kafka-kraft.env
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka:/var/lib/kafka/data
    networks:
      - kafka

# schemas for kafka
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema_registry
    restart: unless-stopped
    environment_file:
      - ./deploy/docker/schema-registry.env
    ports:
      - "8085:8081"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka

# kafka-ui
  redpanda-console:
    image: docker.redpanda.com/vectorized/console:latest
    container_name: redpanda
    restart: unless-stopped
    environment_file:
      - ./deploy/docker/redpanda-console.env
    ports:
      - "8081:8080"
    networks:
      - kafka
    depends_on:
      kafka:
        condition: service_healthy
      schema_registry:
        condition: service_healthy


networks:
  postgres:
  kafka:

volumes:
  pgdata:
  pgadmin:
  kafka:
