services:

  postgres:
    container_name: postgres
    image: postgres:17-alpine
    env_file: deploy/docker/postgres.env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    restart: unless-stopped
    tty: true
    stdin_open: true
    networks:
      - postgres

# postgres ui
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file: deploy/docker/pgadmin.env
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: unless-stopped
    env_file: deploy/docker/kafka-kraft.env
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka:/var/lib/kafka/data
    networks:
      - kafka

# schemas for kafka
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    restart: unless-stopped
    env_file: deploy/docker/schema-registry.env
    ports:
      - "8085:8081"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/subjects || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    restart: unless-stopped
    ports:
      - "8081:8080"
    env_file: deploy/docker/kafka-ui.env
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    networks:
      - kafka

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    env_file:
      - ./deploy/docker/minio.env
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Web UI
    volumes:
      - minio:/data
    restart: unless-stopped
    networks:
      - object-storage
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9000/minio/health/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  createbuckets:
    image: minio/mc
    container_name: minio_createbuckets
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
        mc alias set local http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
        mc mb -p local/inspector;
        exit 0;
      "
    env_file:
      - ./deploy/docker/minio.env
    networks:
      - object-storage

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: [
      "redis-server",
      "--appendonly", "yes"
    ]
    volumes:
      - redis:/data
    restart: unless-stopped
    networks:
      - redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3


networks:
  postgres:
  kafka:
  object-storage:
  redis:

volumes:
  pgdata:
  pgadmin:
  kafka:
  minio:
  redis:
